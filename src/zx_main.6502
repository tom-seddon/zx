cpu 1

include "shared.k.6502"
include "z80.k.6502"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

org $00
guard $80

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "z80.z.6502"

.strptr skip 2
.dumpptr skip 2
.clrptr skip 2

.zp_end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 16 bytes that are accessible from BASIC after BREAK.
;
; $80-$8F may contain junk on entry, as they're used by the loader.
org $70

IF zp_end>=P%:ERROR "zero page overflow":ENDIF

.insctr skip 4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "transfer.c.6502"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

org $e00
guard $8000

.code_begin

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "z80.d.6502"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "z80.c.6502"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; .clear
; {
; lda $f4:pha

; sei

; lda #4:jsr clear_rom
; lda #5:jsr clear_rom
; lda #6:jsr clear_rom
; lda #7:jsr clear_rom

; ldy #>code_end:ldx #$80->code_end:lda #$ff:jsr fill_pages

; cli

; pla:jsr set_rom

; ldx #0:.zclr:stz $0,X:inx:cpx #$90:bne zclr

; rts

; ; A=rom number
; .set_rom
; {
; sei
; sta $fe30:sta $f4
; cli
; rts
; }

; ; A=rom number
; .clear_rom
; {
; jsr set_rom:ldy #$80:ldx #$40:jmp fill_pages
; }

; ; Y=base page X=page count A=value to fill
; .fill_pages
; {
; stz write+1:sty write+2:ldy #0
; .loop:
; .write:sta FIX_xxxx,Y
; iny:bne loop
; inc write+2:dex:bne loop
; rts
; }
; }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; .check
; {

; .check_system
; {
; ; NAUG p427 (pdf p217)
; lda #0:ldx #1:jsr osbyte
; cpx #3:beq good			; Master 128
; cpx #4:beq good			; Master ET
; cpx #5:beq good			; Master Compact
; brk:equb 255:equs "Master series required":brk
; .good
; }

; .check_tube
; {
; ; NAUG p257 (pdf p132)
; lda #$82:jsr osbyte
; cpx #$ff:bne bad
; cpy #$ff:beq good
; .bad:brk:equb 255:equs "Must run in I/O processor":brk
; .good
; }

; .check_swram
; {
; ; NAUG p160 (pdf p84)
; lda #$44:jsr osbyte
; txa:and #$0f:cmp #$0f:beq good
; brk:equb 255:equs "4 banks of sideways RAM required":brk
; .good
; }

; rts
; }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.incz16
{
inc $0,x:bne nc:inc $1,x:.nc
rts
}

; .addz16
; {
; clc
; adc $0,x:sta $0,x:bcc nc:inc $1,x:.nc
; rts
; }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.get_strptr
{
plx:ply				; grab return address

clc
pla:adc #1:sta strptr+0
pla:adc #0:sta strptr+1

phy:phx				; restore return address
rts
}

.printstrnl
jsr get_strptr
jsr doprintstr
jsr osnewl
jmp (strptr)

.printstr
jsr get_strptr
jsr doprintstr
jmp (strptr)

.doprintstr
{
.loop
lda (strptr):ldx #strptr:jsr incz16
cmp #255:beq done
jsr oswrch:bra loop

.done
rts
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.printhex
{
pha
pha:lsr a:lsr a:lsr a:lsr a:jsr hex2
pla:and #$0f:jsr hex2
pla
rts

.hex2:sed:clc:adc #$90:adc #$40:cld:jmp oswrch
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.printfstr
{
jsr get_strptr

.loop
lda (strptr):ldx #strptr:jsr incz16
cmp #255:beq done
cmp #8:bcs print
.vals
tay
.vals_loop
lda (strptr):ldx #strptr:jsr incz16
tax:lda $0,x:jsr printhex
dey:bne vals_loop:bra loop
.print:jsr osasci:bra loop

.done
jmp (strptr)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

dump_width_log2=4

; Entry: A=# lines, YX=address
.dump6502
{
pha:lda #<read6502:sta dumpread+1:lda #>read6502:sta dumpread+2:pla
jmp dumpmem
}

; Entry: A=# lines, YX=address
.dumpz80
{
pha:lda #<zread:sta dumpread+1:lda #>zread:sta dumpread+2:pla
jmp dumpmem
}

.dumpmem
{
stx dumpptr+0:sty dumpptr+1:sta num_rows

.loop

; XXXX: 
lda dumpptr+1:jsr printhex:lda dumpptr+0:jsr printhex:jsr printstr:equs ": ",255

lda dumpptr+0:pha:lda dumpptr+1:pha

lda #1<<dump_width_log2:sta num_columns
.hexloop:
ldx dumpptr+0:ldy dumpptr+1:jsr dumpread:ldx #dumpptr:jsr incz16
jsr printhex:lda #' ':jsr oswrch
dec num_columns:bne hexloop

pla:sta dumpptr+1:pla:sta dumpptr+0

lda #1<<dump_width_log2:sta num_columns
.ascloop
ldx dumpptr+0:ldy dumpptr+1:jsr dumpread:ldx #dumpptr:jsr incz16
cmp #32:bcc nonprint:cmp #127:bcc print:.nonprint:lda #'.':.print
jsr oswrch
dec num_columns:bne ascloop

jsr osnewl:dec num_rows:bne loop
rts

.num_rows:brk
.num_columns:brk
}

.dumpread:jmp FIX_xxxx

.read6502
{
stx read+1:sty read+2
.read:lda FIX_xxxx
rts
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.save_swram
{
sta fname
lda #0:jsr save
lda #1:jsr save
lda #2:jsr save
lda #3:jsr save
rts

.save
clc:adc #48
sta fname
adc #4
sta slot
jsr oswrch
ldx #<cmd:ldy #>cmd:jmp oscli

.cmd:equs "SRSAVE :6.X.":.fname:equs "X 8000+4000 ":.slot:equs "4",13
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.handle_in
{
cpx #$fe:beq ula
rts

.ula
sty zop__tmp
ldx #7
lda #$ff
.loop
lsr zop__tmp:bcc next_row:and zxirq_keys_up,X
.next_row:dex:bpl loop
rts

}

.handle_out
{
rts
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.start
{
jsr zxirq_install

; jsr check
; jsr clear
; ;lda #'A':jsr save_swram
; jsr loadprog
; ;lda #'B':jsr save_swram

; Z80 reset fixups

; FMS-Z80 starts out with F=0. F=0 already (thanks to zx_load) - but
; pval=0 and szval=0, so the next zpack_flags will set F to $44 (P
; set, Z set). So, call zunpack_flags to fix that.
jsr zunpack_flags

; FMS-Z80 does this, for reasons unknown.
lda #$F0:sta zrsph

IF LOG_Z80_STATE
; lda ta_z80_log_file:jsr printhex:jsr osnewl
ENDIF

lda #<handle_in:sta zin_handler+0:lda #>handle_in:sta zin_handler+1
lda #<handle_out:sta zout_handler+0:lda #>handle_out:sta zout_handler+1

; Quit flag hack. To be removed later...
lda #$80:sta zquit

IF LOG_Z80_STATE
lda ta_z80_log_file:sta log_state_gbpb_block
; Write log version
tay:lda #2:jsr osbput
ENDIF

; jsr zpack_flags
; jsr printfstr:
; equs "HVal: ",1,zfhval,13,"53Val: ",1,zf53val,13,"CVal: ",1,zfcval,13
; equs "NVal: ",1,zfnval,13,"SZVal: ",1,zfszval,13,"PVal: ",1,zfpval,13
; equs "F: ",1,zrf,13,255
; jsr osrdch

; Reset instruction counter
FOR i,0,3:stz insctr+i:NEXT

; Reset T-state counter.
lda #112:sta ztstates

; First scanline calls... first_scanline.
lda #<(first_scanline-1):sta zscanlineptr+0
lda #>(first_scanline-1):sta zscanlineptr+1


.zrun_test_loop

; jsr osnewl:lda zrpch:jsr printhex:lda zrpcl:jsr printhex:lda #' ':jsr oswrch
; ldx zrpcl:ldy zrpch:jsr zread:jsr printhex
; jsr osrdch

; {inc insctr+0:bne nc:inc insctr+1:bne nc:inc insctr+2:bne nc:inc insctr+3:.nc}


; IF LIMIT_Z80_INSTRS
; ; Bump instruction counter and check for limit reached.
; {
; FOR i,0,3:inc insctr+i:bne nc:NEXT
; .nc

; FOR i,3,0,-1
; lda insctr+i:cmp #(MAX_Z80_INSTRS>>(i*8))AND255:bcc cont
; NEXT
; jsr printfstr:equs 13,13,"Instruction count reached",13,255
; jmp finish
; .cont
; }
; ENDIF

IF STOP_AT_Z80_PC
; Final PC value reached?
{
lda zrpcl:cmp #<Z80_STOP_PC:bne cont
lda zrpch:cmp #>Z80_STOP_PC:bne cont
jsr printfstr:equs 13,13,"Final PC reached",13,255
jmp finish
.cont
}
ENDIF

IF LOG_Z80_STATE
jsr update_log
ENDIF

jsr zrun

; Check for abort. Go back to BASIC if so.
lda zaborted:bne finish

jmp zrun_test_loop
;lda #'C':jsr save_swram

.finish
jsr save_swram			; save memory dump
lda #0:tay:jsr osfind		; close all files
lda #15:ldx #0:jsr osbyte	; flush all buffers
ldx #<basic:ldy #>basic:jmp oscli

.start_log
{

rts
}

IF LOG_Z80_STATE
.update_log
{
bit zlog:bmi write_to_log

; Check for log start. Reached the LOG FROM INSTRUCTION value?
lda insctr+3:cmp #(LOG_FROM_INSTRUCTION>>24)AND255:bcc inc_insctr
lda insctr+2:cmp #(LOG_FROM_INSTRUCTION>>16)AND255:bcc inc_insctr
lda insctr+1:cmp #(LOG_FROM_INSTRUCTION>>8)AND255:bcc inc_insctr
lda insctr+0:cmp #(LOG_FROM_INSTRUCTION>>0)AND255:bcc inc_insctr

jsr start_log

.write_to_log
; lda zrpch:jsr printhex:lda zrpcl:jsr printhex:lda #' ':jsr oswrch:jsr oswrch
; jsr osnewl
; lda log_state_gbpb_block+10:jsr printhex:lda log_state_gbpb_block+9:jsr printhex
; jsr osnewl

jsr zpack_flags

jsr write_state

; Print a message every 64K of log data output.
lda log_state_gbpb_block+11:.checkb2:cmp #0:beq done
sta checkb2+1
jsr printstr:equs "Wrote: ",255:
FOR i,3,0,-1:lda log_state_gbpb_block+9+i:jsr printhex:NEXT
jsr osnewl
.done

; Check whether a key was pressed. (AUG p151)
lda #$80:ldx #$ff:jsr osbyte:cpx #1:lda #0:rol a:sta zaborted

.inc_insctr
; Increment instruction counter.
{
inc insctr+0:bne inc_done
inc insctr+1:bne inc_done
inc insctr+2:bne inc_done
inc insctr+3
.inc_done
}

rts

.write_state
{
FOR i,0,3:STZ log_state_gbpb_block+1+i:NEXT
lda #zstate_end-zstate_begin:sta log_state_gbpb_block+5+0
FOR i,1,3:STZ log_state_gbpb_block+5+i:NEXT

lda #2				; put bytes at PTR#
ldx #<log_state_gbpb_block:ldy #>log_state_gbpb_block
jsr osgbpb:bcs bad_gbpb

rts
}

.start_log
{
; LOG_FROM_INSTRUCTION was reached. Start the log.
lda #$80:sta zlog

; Write the starting instruction number.
ldx #0:ldy ta_z80_log_file:.bput_insctr_loop:lda insctr,X:jsr osbput:inx:cpx #4:bne bput_insctr_loop

; Print a message
jsr printstr:equs 13,10,"Starting log.",13,10,255
rts
}

}
ENDIF

.bad_gbpb:brk:equs 255,"Log write fail",255

.basic:equs "BASIC",13

IF LOG_Z80_STATE
.log_state_gbpb_block
equb 0				; file handle
equd zstate_begin		; start of data to transfer
equd zstate_end-zstate_begin	; number of bytes to transfer
equd 0				; pointer to use
ENDIF
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; .prog_begin
; incbin "../build/test0.dat"
; .prog_end
; prog_load=0

; .loadprog
; {
; lda #<prog_load:sta loadl+1:lda #>prog_load:sta loadh+1
; lda #<prog_begin:sta read+1:lda #>prog_begin:sta read+2

; .loop
; .read:lda FIX_xxxx:
; .loadl:ldx #FIX_xx:.loadh:ldy #FIX_xx:jsr zwrite
; {inc read+1:bne nc:inc read+2:.nc}
; {inc loadl+1:bne nc:inc loadh+1:.nc}
; lda read+1:cmp #<prog_end:bne loop
; lda read+2:cmp #>prog_end:bne loop
; rts
; }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

align 256
.code_end

space_used=code_end-code_begin
space_left=$8000-code_end

zp_used=zp_end
zp_left=$90-zp_used

ops_used=ops_end-ops_start

PRINT "Ops:",ops_used,~ops_used

PRINT "ZP Used:",zp_used,~zp_used
PRINT "ZP Left:",zp_left,~zp_left

PRINT "Mem Used:",space_used,~space_used
PRINT "Mem Left:",space_left,~space_left
PRINT "Top:",~code_end

SAVE "ZX2",code_begin,code_end,start

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

org $3000
guard $5800			; emulator runs in MODE 4
clear $3000,$5800

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.x8
FOR i,0,31:EQUB (i<<3)AND255:NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; There are 224 T-states per scanline.

; 312.5 scanlines/PAL frame, 50 PAL frames/sec.

; 224 * 312.5 * 50 = 3,500,000...

; ZX treats this as 625 half-scanlines.

.first_scanline

FOR half_scanline_idx,0,624
IF half_scanline_idx<192*2

IF (half_scanline_idx AND 1)==0

; skip it

ELSE

; skip this one.
; draw data.
y=half_scanline_idx/2		; scanline on screen
spectrum_offset=((y AND 7)<<8)+(((y>>3) AND 7)<<5)+((y>>6)<<11) ; offset
								; from
								; display
								; RAM
								; base
bbc_address=&5800+(y>>3)*320+(y AND 7)
lda bbc_address:eor #$ff:sta bbc_address
ldx #31
.loop
lda $8000+spectrum_offset,X
ldy x8,X
sta bbc_address+32,Y
dex
bpl loop
.done


ENDIF

ELSE

ENDIF

jsr scanline_done

NEXT

jmp first_scanline

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SAVE "ZXW",$3000,$5800
