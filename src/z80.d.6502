;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ROMSEL value for high byte of each Z80 address.
.romsel_table:FOR i,0,255:EQUB 4+(i>>6):NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; MSB of address for high byte of each Z80 address.
.msb_table:FOR i,0,255:EQUB $80+(i AND $3f):NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Maps value to S and Z flag settings.
.sz_flag_values
FOR i,0,255
IF i==0:z=1:ELSE:z=0:ENDIF
IF i AND $80:s=1:ELSE:s=0:ENDIF
EQUB (s<<ZS_BIT) OR (z<<ZZ_BIT)
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Maps value to P flag setting.
.p_flag_values
FOR i,0,255
IF i AND (1<<0):b0=1:ELSE:b0=0:ENDIF
IF i AND (1<<1):b1=1:ELSE:b1=0:ENDIF
IF i AND (1<<2):b2=1:ELSE:b2=0:ENDIF
IF i AND (1<<3):b3=1:ELSE:b3=0:ENDIF
IF i AND (1<<4):b4=1:ELSE:b4=0:ENDIF
IF i AND (1<<5):b5=1:ELSE:b5=0:ENDIF
IF i AND (1<<6):b6=1:ELSE:b6=0:ENDIF
IF i AND (1<<7):b7=1:ELSE:b7=0:ENDIF
n=b0+b1+b2+b3+b4+b5+b6+b7
IF n MOD 2==0:p=1:ELSE:p=0:ENDIF
EQUB p<<ZP_BIT
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Maps F register value to an arbitrary value that would set the S and
; Z flags the same way.
;
; (Of course, you can't actually set S and Z at the same time, so the
; valuse for those entries are bogus...)
.fszvals
FOR f,0,255
IF f AND ZZ_MASK:z=0:ELSE:z=1:ENDIF
IF f AND ZN_MASK:s=0x80:ELSE:s=0:ENDIF
EQUB z OR s
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.fpvals
FOR i,0,255
IF i AND ZP_MASK:EQUB ZP0_VALUE:ELSE:EQUB ZP1_VALUE:ENDIF
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.fcvals
FOR i,0,255
IF i and ZC_MASK:EQUB 128:ELSE:EQUB 0:ENDIF
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.fnvals
FOR i,0,255
IF i AND ZN_MASK:EQUB 128:ELSE:EQUB 0:ENDIF
NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Entry: X (LSB), Y (MSB) = port

; Exit: A = byte read
.zin_handler equw zhandle_in_default

; Entry: X (LSB), Y (MSB) - port; A - byte to write

.zout_handler equw zhandle_out_default

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
